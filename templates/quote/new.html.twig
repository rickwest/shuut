{% extends 'layouts/admin.html.twig' %}

{% block title %}New Quote{% endblock %}

{% block headerContent %}
    <h1 class="h3">Create New Quote</h1>
{% endblock %}

{% block content %}
    {{ form_start(form, {attr: {novalidate: true}}) }}
    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header">
                    <strong>Basic Details</strong>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-4">
                            {{ form_row(form.customer) }}
                        </div>
                        <div class="col-md-4">
                            {{ form_row(form.vehicleType) }}
                        </div>
                        <div class="col-md-4">
                            {{ form_row(form.priceMatrix) }}
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card">
                <div class="card-header font-weight-bold">
                    Pick-Up Address
                </div>
                <div class="card-body">
                    <div class="form-group">
                        <label for="originInput">Start typing to find the address or enter the address manually</label>
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text">
                                    <i class="fa fa-map-marker"></i>
                                </span>
                            </div>
                            <input type="text" id="originInput" class="form-control" />
                        </div>
                    </div>
                    <hr>
                    {{ form_row(form.pickUp.line1) }}
                    {{ form_row(form.pickUp.line2) }}
                    {{ form_row(form.pickUp.city) }}
                    {{ form_row(form.pickUp.county) }}
                    <div class="row">
                        <div class="col-md-4">
                            {{ form_row(form.pickUp.postcode) }}
                        </div>
                        <div class="form-group col-md-8">
                            {{ form_row(form.pickUp.country) }}
                        </div>
                    </div>
                    {{ form_row(form.pickUp.lat) }}
                    {{ form_row(form.pickUp.lon) }}
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card">
                <div class="card-header font-weight-bold">
                    Drop-Off Address
                </div>
                <div class="card-body">
                    <div class="form-group">
                        <label for="destinationInput">Start typing to find the address or enter the address manually</label>
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text">
                                    <i class="fa fa-map-marker"></i>
                                </span>
                            </div>
                            <input type="text" id="destinationInput" class="form-control" />
                        </div>
                    </div>
                    <hr>
                    {{ form_row(form.dropOff.line1) }}
                    {{ form_row(form.dropOff.line2) }}
                    {{ form_row(form.dropOff.city) }}
                    {{ form_row(form.dropOff.county) }}
                    <div class="row">
                        <div class="col-md-4">
                            {{ form_row(form.dropOff.postcode) }}
                        </div>
                        <div class="form-group col-md-8">
                            {{ form_row(form.dropOff.country) }}
                        </div>
                    </div>
                    {{ form_row(form.dropOff.lat) }}
                    {{ form_row(form.dropOff.lon) }}
                </div>
            </div>
        </div>
    </div>
    {% include 'partials/crud/_new_edit_actions.html.twig' with {routeNamePrefix: 'quote_', submitLabel: 'Next'} %}
    {{ form_end(form) }}
{% endblock %}

{% block javascripts %}
    <script type="text/javascript">
        var originAutocomplete, destinationAutocomplete;

        var componentForm = {
            line1: ['street_number', 'short_name'],// house number
            line2: ['route', 'long_name'], // street name
            city: ['postal_town', 'long_name'], //town
            county: ['administrative_area_level_2', 'long_name'], // county
            country: ['country', 'long_name'], // e.g united kingdom
            postcode: ['postal_code', 'short_name'] // post code
        };

        function initAutocomplete() {
            // Create the autocomplete object, restricting the search predictions to
            // geographical location types.
            originAutocomplete = new google.maps.places.Autocomplete($('#originInput')[0], {types: ['geocode']});
            destinationAutocomplete = new google.maps.places.Autocomplete($('#destinationInput')[0], {types: ['geocode']});

            // Avoid paying for data that you don't need by restricting the set of
            // place fields that are returned to just the address components.
            originAutocomplete.setFields(['address_component', 'geometry']);
            destinationAutocomplete.setFields(['address_component', 'geometry']);

            // When the user selects an address from the drop-down, populate the
            // address fields in the form.
            originAutocomplete.addListener('place_changed', function () {
                fillInAddress(originAutocomplete, 'quote_pickUp_')
            });
            
            destinationAutocomplete.addListener('place_changed', function () {
                fillInAddress(destinationAutocomplete, 'quote_dropOff_')
            });
        }

        function fillInAddress(autocomplete, prefix) {
            // Get the place details from the autocomplete object.
            var place = autocomplete.getPlace();

            // Clear existing values
            for (var component in componentForm) {
                $('#' + prefix + component).val('');
                $('#' + prefix + component).prop('disabled', false);
            }
            // Clear hidden values
            $('#' + prefix + 'lat').val('');
            $('#' + prefix + 'lon').val('');

            // Get lat and lon and set hidden fields
            $('#' + prefix + 'lat').val(place.geometry.location.lat());
            $('#' + prefix + 'lon').val(place.geometry.location.lng());

            // Get each component of the address from the place details,
            // and then fill-in the corresponding field on the form.
            for (var i = 0; i < place.address_components.length; i++) {
                var addressType = place.address_components[i].types[0];

                for (var component in componentForm) {
                    if (componentForm[component][0] == addressType) {
                        var val = place.address_components[i][componentForm[component][1]];
                        $('#' + prefix + component).val(val);
                    }
                }
            }
        }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key={{ googleMapsApiKey }}&libraries=places&callback=initAutocomplete" async defer></script>
{% endblock %}